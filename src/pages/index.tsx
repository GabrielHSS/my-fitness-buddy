import Head from 'next/head'
import styled from 'styled-components'
import { MenuOutlined, ExperimentFilled } from '@ant-design/icons'
import {
  Button,
  Card,
  Descriptions,
  Dropdown,
  Menu,
  Space,
  Table,
  Tag,
  List
} from 'antd'
import Background from '../assets/bg.png'
import api from '../services/api'
import { useEffect, useState } from 'react'
import Search from 'antd/lib/input/Search'

const Wrapper = styled.main`
  min-height: 100vh;
  min-width: 100vw;
`

const Header = styled.section`
  display: flex;
  align-items: center;
  padding: 12px 70px;
  background-color: ${props => props.theme.colors.primary40};
  .logo-container {
    display: flex;
    align-items: center;
  }
  .logo {
    font-size: 16px;
    margin-right: 12px;
    color: #fff;
  }
  .title {
    text-transform: uppercase;
    font: 700 20px Poppins, sans-serif;
    margin-bottom: 0;
    color: #fff;
  }
  .menu-button {
    width: 40px;
    height: 40px;
    padding: 0;
    border-radius: 5px;
  }
`
const Body = styled.section`
  padding: 32px 70px;
  margin-top: -72px;
  margin-bottom: 108px;
  .body-card {
    box-shadow: 0px 25px 33px 0px hsla(248, 57%, 60%, 0.05);
    border-radius: 5px;
  }
`
const Heading = styled.div`
  background-image: url('/bg.png');
  background-size: cover;
  background-position-x: 50%;
  text-align: center;
  color: #fff;
  padding: 108px 0;
  .title {
    font: 700 64px/100% Poppins;
    margin-bottom: 24px;
  }
  .subtitle {
    font: 500 28px/100% Poppins;
  }
`
const SearchContainer = styled(Card)`
  width: 50%;
  margin: 0 auto;
  margin-bottom: 54px;

  & .ant-input-search .ant-input-affix-wrapper:focus,
  & .ant-input-search .ant-input-affix-wrapper:active,
  & .ant-input-search .ant-input-affix-wrapper:hover,
  & .ant-input-affix-wrapper:focus,
  & .ant-input-affix-wrapper-focused {
    border-color: #d9d9d9;
    outline: 0;
    -webkit-box-shadow: none;
    box-shadow: none;
  }
  & .ant-input-search .ant-input-affix-wrapper input {
  }
  & .ant-input-search .ant-input-affix-wrapper input::placeholder {
    color: #e6e6e6;
  }
`

const columns = [
  {
    title: 'ID',
    dataIndex: 'key',
    key: 'key'
  },
  {
    title: 'Nome',
    dataIndex: 'description',
    key: 'description'
  },
  {
    title: 'Categoria',
    dataIndex: 'foodCategory',
    key: 'foodCategory'
  }
]

const data = [
  {
    key: '1',
    name: 'John Brown',
    age: 32,
    address: 'New York No. 1 Lake Park'
  },
  {
    key: '2',
    name: 'Jim Green',
    age: 42,
    address: 'London No. 1 Lake Park'
  },
  {
    key: '3',
    name: 'Joe Black',
    age: 32,
    address: 'Sidney No. 1 Lake Park'
  }
]
const tableData = (data: any) => {
  const rows: Array<any> = []
  data?.forEach((item: any) => {
    // Remove branded foods info
    item.dataType === 'Survey (FNDDS)' &&
      rows.push({
        key: item.fdcId,
        description: item.description,
        foodCategory: item.foodCategory,
        foodNutrients: item.foodNutrients
      })
  })

  return rows
}
const Home: React.FC = () => {
  const [apiData, setApiData] = useState<any>({})
  const [selectedFood, setSelectedFood] = useState<any>()
  const [loading, setLoading] = useState<any>()

  const handleData = async () => {
    setLoading(true)
    selectedFood !== '' &&
      (await api
        .get(`/foods/search?query=${selectedFood}`)
        .then(({ data }) => setApiData(data)))
    setLoading(false)
  }
  const expandableRow = (record: any) => (
    <List
      bordered
      dataSource={record.foodNutrients}
      style={{ maxHeight: '500px', overflowY: 'scroll' }}
      renderItem={(item: any) => (
        <List.Item>
          <p style={{ width: '50%' }}>{item.nutrientName}</p>
          <p style={{ width: '50%' }}>{item.nutrientNumber / 100 + 'g'}</p>
        </List.Item>
      )}
    />
  )
  return (
    <div>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Wrapper>
        <Header>
          <span className="logo-container">
            <ExperimentFilled className="logo" />
            <h1 className="title">My Fitness Buddy</h1>
          </span>
        </Header>
        <Heading>
          <p className="title">Seu parceiro fitness chegou!</p>
          <p className="subtitle">
            Tenha à mão as informações nutricionais de cada alimento
          </p>
        </Heading>
        <Body>
          <SearchContainer>
            <Search
              placeholder="Pesquise aqui o alimento"
              allowClear
              size="large"
              onChange={event => setSelectedFood(event.target.value)}
              onSearch={handleData}
            />
          </SearchContainer>
          <Card className={'body-card'}>
            <Table
              columns={columns}
              dataSource={tableData(apiData.foods)}
              loading={loading}
              expandable={{
                expandedRowRender: record => expandableRow(record)
              }}
            />
          </Card>
        </Body>
      </Wrapper>
    </div>
  )
}

export default Home
